;; Auto-generated. Do not edit!


(when (boundp 'franka_interface_msgs::ExecuteSkillFeedback)
  (if (not (find-package "FRANKA_INTERFACE_MSGS"))
    (make-package "FRANKA_INTERFACE_MSGS"))
  (shadow 'ExecuteSkillFeedback (find-package "FRANKA_INTERFACE_MSGS")))
(unless (find-package "FRANKA_INTERFACE_MSGS::EXECUTESKILLFEEDBACK")
  (make-package "FRANKA_INTERFACE_MSGS::EXECUTESKILLFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude ExecuteSkillFeedback.msg.html


(defclass franka_interface_msgs::ExecuteSkillFeedback
  :super ros::object
  :slots (_num_execution_feedback _execution_feedback ))

(defmethod franka_interface_msgs::ExecuteSkillFeedback
  (:init
   (&key
    ((:num_execution_feedback __num_execution_feedback) 0)
    ((:execution_feedback __execution_feedback) (make-array 0 :initial-element 0 :element-type :char))
    )
   (send-super :init)
   (setq _num_execution_feedback (round __num_execution_feedback))
   (setq _execution_feedback __execution_feedback)
   self)
  (:num_execution_feedback
   (&optional __num_execution_feedback)
   (if __num_execution_feedback (setq _num_execution_feedback __num_execution_feedback)) _num_execution_feedback)
  (:execution_feedback
   (&optional __execution_feedback)
   (if __execution_feedback (setq _execution_feedback __execution_feedback)) _execution_feedback)
  (:serialization-length
   ()
   (+
    ;; uint64 _num_execution_feedback
    8
    ;; uint8[] _execution_feedback
    (* 1    (length _execution_feedback)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint64 _num_execution_feedback
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _num_execution_feedback (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _num_execution_feedback) (= (length (_num_execution_feedback . bv)) 2)) ;; bignum
              (write-long (ash (elt (_num_execution_feedback . bv) 0) 0) s)
              (write-long (ash (elt (_num_execution_feedback . bv) 1) -1) s))
             ((and (class _num_execution_feedback) (= (length (_num_execution_feedback . bv)) 1)) ;; big1
              (write-long (elt (_num_execution_feedback . bv) 0) s)
              (write-long (if (>= _num_execution_feedback 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _num_execution_feedback s)(write-long (if (>= _num_execution_feedback 0) 0 #xffffffff) s)))
     ;; uint8[] _execution_feedback
     (write-long (length _execution_feedback) s)
     (princ _execution_feedback s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint64 _num_execution_feedback
     
#+(or :alpha :irix6 :x86_64)
      (setf _num_execution_feedback (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _num_execution_feedback (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;; uint8[] _execution_feedback
   (let ((n (sys::peek buf ptr- :integer))) (incf ptr- 4)
     (setq _execution_feedback (make-array n :element-type :char))
     (replace _execution_feedback buf :start2 ptr-) (incf ptr- n))
   ;;
   self)
  )

(setf (get franka_interface_msgs::ExecuteSkillFeedback :md5sum-) "ff908ea97d128e4dfc430213d4a485e0")
(setf (get franka_interface_msgs::ExecuteSkillFeedback :datatype-) "franka_interface_msgs/ExecuteSkillFeedback")
(setf (get franka_interface_msgs::ExecuteSkillFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Feedback message - happens during skill execution 
uint64 num_execution_feedback
uint8[] execution_feedback


")



(provide :franka_interface_msgs/ExecuteSkillFeedback "ff908ea97d128e4dfc430213d4a485e0")


