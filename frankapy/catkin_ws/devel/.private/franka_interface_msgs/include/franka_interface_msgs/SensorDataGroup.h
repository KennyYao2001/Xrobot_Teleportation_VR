// Generated by gencpp from file franka_interface_msgs/SensorDataGroup.msg
// DO NOT EDIT!


#ifndef FRANKA_INTERFACE_MSGS_MESSAGE_SENSORDATAGROUP_H
#define FRANKA_INTERFACE_MSGS_MESSAGE_SENSORDATAGROUP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <franka_interface_msgs/SensorData.h>
#include <franka_interface_msgs/SensorData.h>
#include <franka_interface_msgs/SensorData.h>

namespace franka_interface_msgs
{
template <class ContainerAllocator>
struct SensorDataGroup_
{
  typedef SensorDataGroup_<ContainerAllocator> Type;

  SensorDataGroup_()
    : header()
    , has_trajectory_generator_sensor_data(false)
    , has_feedback_controller_sensor_data(false)
    , has_termination_handler_sensor_data(false)
    , trajectoryGeneratorSensorData()
    , feedbackControllerSensorData()
    , terminationHandlerSensorData()  {
    }
  SensorDataGroup_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , has_trajectory_generator_sensor_data(false)
    , has_feedback_controller_sensor_data(false)
    , has_termination_handler_sensor_data(false)
    , trajectoryGeneratorSensorData(_alloc)
    , feedbackControllerSensorData(_alloc)
    , terminationHandlerSensorData(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _has_trajectory_generator_sensor_data_type;
  _has_trajectory_generator_sensor_data_type has_trajectory_generator_sensor_data;

   typedef uint8_t _has_feedback_controller_sensor_data_type;
  _has_feedback_controller_sensor_data_type has_feedback_controller_sensor_data;

   typedef uint8_t _has_termination_handler_sensor_data_type;
  _has_termination_handler_sensor_data_type has_termination_handler_sensor_data;

   typedef  ::franka_interface_msgs::SensorData_<ContainerAllocator>  _trajectoryGeneratorSensorData_type;
  _trajectoryGeneratorSensorData_type trajectoryGeneratorSensorData;

   typedef  ::franka_interface_msgs::SensorData_<ContainerAllocator>  _feedbackControllerSensorData_type;
  _feedbackControllerSensorData_type feedbackControllerSensorData;

   typedef  ::franka_interface_msgs::SensorData_<ContainerAllocator>  _terminationHandlerSensorData_type;
  _terminationHandlerSensorData_type terminationHandlerSensorData;





  typedef boost::shared_ptr< ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator> const> ConstPtr;

}; // struct SensorDataGroup_

typedef ::franka_interface_msgs::SensorDataGroup_<std::allocator<void> > SensorDataGroup;

typedef boost::shared_ptr< ::franka_interface_msgs::SensorDataGroup > SensorDataGroupPtr;
typedef boost::shared_ptr< ::franka_interface_msgs::SensorDataGroup const> SensorDataGroupConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator1> & lhs, const ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.has_trajectory_generator_sensor_data == rhs.has_trajectory_generator_sensor_data &&
    lhs.has_feedback_controller_sensor_data == rhs.has_feedback_controller_sensor_data &&
    lhs.has_termination_handler_sensor_data == rhs.has_termination_handler_sensor_data &&
    lhs.trajectoryGeneratorSensorData == rhs.trajectoryGeneratorSensorData &&
    lhs.feedbackControllerSensorData == rhs.feedbackControllerSensorData &&
    lhs.terminationHandlerSensorData == rhs.terminationHandlerSensorData;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator1> & lhs, const ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace franka_interface_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "859c186ac0046509397a685ba0f2e8d2";
  }

  static const char* value(const ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x859c186ac0046509ULL;
  static const uint64_t static_value2 = 0x397a685ba0f2e8d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_interface_msgs/SensorDataGroup";
  }

  static const char* value(const ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SensorDataGroup\n"
"std_msgs/Header header\n"
"bool has_trajectory_generator_sensor_data\n"
"bool has_feedback_controller_sensor_data\n"
"bool has_termination_handler_sensor_data\n"
"SensorData trajectoryGeneratorSensorData\n"
"SensorData feedbackControllerSensorData\n"
"SensorData terminationHandlerSensorData\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: franka_interface_msgs/SensorData\n"
"# Sensor data\n"
"std_msgs/Header header\n"
"string info\n"
"uint8 type\n"
"int32 size\n"
"uint8[] sensorData\n"
;
  }

  static const char* value(const ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.has_trajectory_generator_sensor_data);
      stream.next(m.has_feedback_controller_sensor_data);
      stream.next(m.has_termination_handler_sensor_data);
      stream.next(m.trajectoryGeneratorSensorData);
      stream.next(m.feedbackControllerSensorData);
      stream.next(m.terminationHandlerSensorData);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorDataGroup_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_interface_msgs::SensorDataGroup_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "has_trajectory_generator_sensor_data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_trajectory_generator_sensor_data);
    s << indent << "has_feedback_controller_sensor_data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_feedback_controller_sensor_data);
    s << indent << "has_termination_handler_sensor_data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_termination_handler_sensor_data);
    s << indent << "trajectoryGeneratorSensorData: ";
    s << std::endl;
    Printer< ::franka_interface_msgs::SensorData_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectoryGeneratorSensorData);
    s << indent << "feedbackControllerSensorData: ";
    s << std::endl;
    Printer< ::franka_interface_msgs::SensorData_<ContainerAllocator> >::stream(s, indent + "  ", v.feedbackControllerSensorData);
    s << indent << "terminationHandlerSensorData: ";
    s << std::endl;
    Printer< ::franka_interface_msgs::SensorData_<ContainerAllocator> >::stream(s, indent + "  ", v.terminationHandlerSensorData);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_INTERFACE_MSGS_MESSAGE_SENSORDATAGROUP_H
