# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from franka_interface_msgs/RunLoopProcessInfoState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RunLoopProcessInfoState(genpy.Message):
  _md5sum = "86cd879bb4a3cbdb82beb45c42836130"
  _type = "franka_interface_msgs/RunLoopProcessInfoState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Skill state
std_msgs/Header header
int64 current_memory_region
int64 current_sensor_region
int64 current_feedback_region
int64 current_skill_id 
int64 current_skill_type
int64 current_meta_skill_id
int64 current_meta_skill_type
string current_skill_description
bool new_skill_available
int64 new_skill_id
int64 new_skill_type
int64 new_meta_skill_id
int64 new_meta_skill_type
string new_skill_description
bool is_running_skill
bool skill_preempted
int64 done_skill_id
int64 result_skill_id
float64 time_skill_started_in_robot_time
float64 time_skill_finished_in_robot_time
bool is_fresh
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','current_memory_region','current_sensor_region','current_feedback_region','current_skill_id','current_skill_type','current_meta_skill_id','current_meta_skill_type','current_skill_description','new_skill_available','new_skill_id','new_skill_type','new_meta_skill_id','new_meta_skill_type','new_skill_description','is_running_skill','skill_preempted','done_skill_id','result_skill_id','time_skill_started_in_robot_time','time_skill_finished_in_robot_time','is_fresh']
  _slot_types = ['std_msgs/Header','int64','int64','int64','int64','int64','int64','int64','string','bool','int64','int64','int64','int64','string','bool','bool','int64','int64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,current_memory_region,current_sensor_region,current_feedback_region,current_skill_id,current_skill_type,current_meta_skill_id,current_meta_skill_type,current_skill_description,new_skill_available,new_skill_id,new_skill_type,new_meta_skill_id,new_meta_skill_type,new_skill_description,is_running_skill,skill_preempted,done_skill_id,result_skill_id,time_skill_started_in_robot_time,time_skill_finished_in_robot_time,is_fresh

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RunLoopProcessInfoState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.current_memory_region is None:
        self.current_memory_region = 0
      if self.current_sensor_region is None:
        self.current_sensor_region = 0
      if self.current_feedback_region is None:
        self.current_feedback_region = 0
      if self.current_skill_id is None:
        self.current_skill_id = 0
      if self.current_skill_type is None:
        self.current_skill_type = 0
      if self.current_meta_skill_id is None:
        self.current_meta_skill_id = 0
      if self.current_meta_skill_type is None:
        self.current_meta_skill_type = 0
      if self.current_skill_description is None:
        self.current_skill_description = ''
      if self.new_skill_available is None:
        self.new_skill_available = False
      if self.new_skill_id is None:
        self.new_skill_id = 0
      if self.new_skill_type is None:
        self.new_skill_type = 0
      if self.new_meta_skill_id is None:
        self.new_meta_skill_id = 0
      if self.new_meta_skill_type is None:
        self.new_meta_skill_type = 0
      if self.new_skill_description is None:
        self.new_skill_description = ''
      if self.is_running_skill is None:
        self.is_running_skill = False
      if self.skill_preempted is None:
        self.skill_preempted = False
      if self.done_skill_id is None:
        self.done_skill_id = 0
      if self.result_skill_id is None:
        self.result_skill_id = 0
      if self.time_skill_started_in_robot_time is None:
        self.time_skill_started_in_robot_time = 0.
      if self.time_skill_finished_in_robot_time is None:
        self.time_skill_finished_in_robot_time = 0.
      if self.is_fresh is None:
        self.is_fresh = False
    else:
      self.header = std_msgs.msg.Header()
      self.current_memory_region = 0
      self.current_sensor_region = 0
      self.current_feedback_region = 0
      self.current_skill_id = 0
      self.current_skill_type = 0
      self.current_meta_skill_id = 0
      self.current_meta_skill_type = 0
      self.current_skill_description = ''
      self.new_skill_available = False
      self.new_skill_id = 0
      self.new_skill_type = 0
      self.new_meta_skill_id = 0
      self.new_meta_skill_type = 0
      self.new_skill_description = ''
      self.is_running_skill = False
      self.skill_preempted = False
      self.done_skill_id = 0
      self.result_skill_id = 0
      self.time_skill_started_in_robot_time = 0.
      self.time_skill_finished_in_robot_time = 0.
      self.is_fresh = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7q().pack(_x.current_memory_region, _x.current_sensor_region, _x.current_feedback_region, _x.current_skill_id, _x.current_skill_type, _x.current_meta_skill_id, _x.current_meta_skill_type))
      _x = self.current_skill_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B4q().pack(_x.new_skill_available, _x.new_skill_id, _x.new_skill_type, _x.new_meta_skill_id, _x.new_meta_skill_type))
      _x = self.new_skill_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2q2dB().pack(_x.is_running_skill, _x.skill_preempted, _x.done_skill_id, _x.result_skill_id, _x.time_skill_started_in_robot_time, _x.time_skill_finished_in_robot_time, _x.is_fresh))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.current_memory_region, _x.current_sensor_region, _x.current_feedback_region, _x.current_skill_id, _x.current_skill_type, _x.current_meta_skill_id, _x.current_meta_skill_type,) = _get_struct_7q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_skill_description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_skill_description = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.new_skill_available, _x.new_skill_id, _x.new_skill_type, _x.new_meta_skill_id, _x.new_meta_skill_type,) = _get_struct_B4q().unpack(str[start:end])
      self.new_skill_available = bool(self.new_skill_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.new_skill_description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.new_skill_description = str[start:end]
      _x = self
      start = end
      end += 35
      (_x.is_running_skill, _x.skill_preempted, _x.done_skill_id, _x.result_skill_id, _x.time_skill_started_in_robot_time, _x.time_skill_finished_in_robot_time, _x.is_fresh,) = _get_struct_2B2q2dB().unpack(str[start:end])
      self.is_running_skill = bool(self.is_running_skill)
      self.skill_preempted = bool(self.skill_preempted)
      self.is_fresh = bool(self.is_fresh)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7q().pack(_x.current_memory_region, _x.current_sensor_region, _x.current_feedback_region, _x.current_skill_id, _x.current_skill_type, _x.current_meta_skill_id, _x.current_meta_skill_type))
      _x = self.current_skill_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B4q().pack(_x.new_skill_available, _x.new_skill_id, _x.new_skill_type, _x.new_meta_skill_id, _x.new_meta_skill_type))
      _x = self.new_skill_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2q2dB().pack(_x.is_running_skill, _x.skill_preempted, _x.done_skill_id, _x.result_skill_id, _x.time_skill_started_in_robot_time, _x.time_skill_finished_in_robot_time, _x.is_fresh))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.current_memory_region, _x.current_sensor_region, _x.current_feedback_region, _x.current_skill_id, _x.current_skill_type, _x.current_meta_skill_id, _x.current_meta_skill_type,) = _get_struct_7q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_skill_description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_skill_description = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.new_skill_available, _x.new_skill_id, _x.new_skill_type, _x.new_meta_skill_id, _x.new_meta_skill_type,) = _get_struct_B4q().unpack(str[start:end])
      self.new_skill_available = bool(self.new_skill_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.new_skill_description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.new_skill_description = str[start:end]
      _x = self
      start = end
      end += 35
      (_x.is_running_skill, _x.skill_preempted, _x.done_skill_id, _x.result_skill_id, _x.time_skill_started_in_robot_time, _x.time_skill_finished_in_robot_time, _x.is_fresh,) = _get_struct_2B2q2dB().unpack(str[start:end])
      self.is_running_skill = bool(self.is_running_skill)
      self.skill_preempted = bool(self.skill_preempted)
      self.is_fresh = bool(self.is_fresh)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2q2dB = None
def _get_struct_2B2q2dB():
    global _struct_2B2q2dB
    if _struct_2B2q2dB is None:
        _struct_2B2q2dB = struct.Struct("<2B2q2dB")
    return _struct_2B2q2dB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7q = None
def _get_struct_7q():
    global _struct_7q
    if _struct_7q is None:
        _struct_7q = struct.Struct("<7q")
    return _struct_7q
_struct_B4q = None
def _get_struct_B4q():
    global _struct_B4q
    if _struct_B4q is None:
        _struct_B4q = struct.Struct("<B4q")
    return _struct_B4q
