# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from franka_interface_msgs/GetCurrentRobotStateCmdRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetCurrentRobotStateCmdRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "franka_interface_msgs/GetCurrentRobotStateCmdRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetCurrentRobotStateCmdRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from franka_interface_msgs/GetCurrentRobotStateCmdResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import franka_interface_msgs.msg
import std_msgs.msg

class GetCurrentRobotStateCmdResponse(genpy.Message):
  _md5sum = "b518dbe0aba9b1925588d18e42fb85fa"
  _type = "franka_interface_msgs/GetCurrentRobotStateCmdResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """RobotState robot_state

================================================================================
MSG: franka_interface_msgs/RobotState
# Franka robot state
# For more information about each field, look at robot_state.h here: 
# https://github.com/frankaemika/libfranka/blob/master/include/franka/robot_state.h
std_msgs/Header header
float64[16] pose_desired
float64[16] O_T_EE 
float64[16] O_T_EE_d
float64[16] F_T_EE
float64[16] EE_T_K
float64 m_ee
float64[9] I_ee
float64[3] F_x_Cee
float64 m_load
float64[9] I_load
float64[3] F_x_Cload
float64 m_total
float64[9] I_total
float64[3] F_x_Ctotal
float64[2] elbow
float64[2] elbow_d
float64[2] elbow_c
float64[2] delbow_c
float64[2] ddelbow_c
float64[7] tau_J
float64[7] tau_J_d
float64[7] dtau_J
float64[7] q
float64[7] q_d
float64[7] dq
float64[7] dq_d
float64[7] ddq_d
float64[7] joint_contact
float64[6] cartesian_contact
float64[7] joint_collision
float64[6] cartesian_collision
float64[7] tau_ext_hat_filtered
float64[6] O_F_ext_hat_K
float64[6] K_F_ext_hat_K
float64[6] O_dP_EE_d
float64[16] O_T_EE_c
float64[6] O_dP_EE_c
float64[6] O_ddP_EE_c
float64[7] theta
float64[7] dtheta
Errors current_errors
Errors last_motion_errors
float64 control_command_success_rate
uint8 ROBOT_MODE_OTHER=0
uint8 ROBOT_MODE_IDLE=1
uint8 ROBOT_MODE_MOVE=2
uint8 ROBOT_MODE_GUIDING=3
uint8 ROBOT_MODE_REFLEX=4
uint8 ROBOT_MODE_USER_STOPPED=5
uint8 ROBOT_MODE_AUTOMATIC_ERROR_RECOVERY=6
uint8 robot_mode
float64 robot_time
float64 gripper_width
float64 gripper_max_width
bool gripper_is_grasped
uint16 gripper_temperature
float64 gripper_time
bool is_fresh
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: franka_interface_msgs/Errors
bool joint_position_limits_violation
bool cartesian_position_limits_violation
bool self_collision_avoidance_violation
bool joint_velocity_violation
bool cartesian_velocity_violation
bool force_control_safety_violation
bool joint_reflex
bool cartesian_reflex
bool max_goal_pose_deviation_violation
bool max_path_pose_deviation_violation
bool cartesian_velocity_profile_safety_violation
bool joint_position_motion_generator_start_pose_invalid
bool joint_motion_generator_position_limits_violation
bool joint_motion_generator_velocity_limits_violation
bool joint_motion_generator_velocity_discontinuity
bool joint_motion_generator_acceleration_discontinuity
bool cartesian_position_motion_generator_start_pose_invalid
bool cartesian_motion_generator_elbow_limit_violation
bool cartesian_motion_generator_velocity_limits_violation
bool cartesian_motion_generator_velocity_discontinuity
bool cartesian_motion_generator_acceleration_discontinuity
bool cartesian_motion_generator_elbow_sign_inconsistent
bool cartesian_motion_generator_start_elbow_invalid
bool cartesian_motion_generator_joint_position_limits_violation
bool cartesian_motion_generator_joint_velocity_limits_violation
bool cartesian_motion_generator_joint_velocity_discontinuity
bool cartesian_motion_generator_joint_acceleration_discontinuity
bool cartesian_position_motion_generator_invalid_frame
bool force_controller_desired_force_tolerance_violation
bool controller_torque_discontinuity
bool start_elbow_sign_inconsistent
bool communication_constraints_violation
bool power_limit_violation
bool joint_p2p_insufficient_torque_for_planning
bool tau_j_range_violation
bool instability_detected
bool joint_move_in_wrong_direction"""
  __slots__ = ['robot_state']
  _slot_types = ['franka_interface_msgs/RobotState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetCurrentRobotStateCmdResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_state is None:
        self.robot_state = franka_interface_msgs.msg.RobotState()
    else:
      self.robot_state = franka_interface_msgs.msg.RobotState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.robot_state.header.seq, _x.robot_state.header.stamp.secs, _x.robot_state.header.stamp.nsecs))
      _x = self.robot_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_16d().pack(*self.robot_state.pose_desired))
      buff.write(_get_struct_16d().pack(*self.robot_state.O_T_EE))
      buff.write(_get_struct_16d().pack(*self.robot_state.O_T_EE_d))
      buff.write(_get_struct_16d().pack(*self.robot_state.F_T_EE))
      buff.write(_get_struct_16d().pack(*self.robot_state.EE_T_K))
      _x = self.robot_state.m_ee
      buff.write(_get_struct_d().pack(_x))
      buff.write(_get_struct_9d().pack(*self.robot_state.I_ee))
      buff.write(_get_struct_3d().pack(*self.robot_state.F_x_Cee))
      _x = self.robot_state.m_load
      buff.write(_get_struct_d().pack(_x))
      buff.write(_get_struct_9d().pack(*self.robot_state.I_load))
      buff.write(_get_struct_3d().pack(*self.robot_state.F_x_Cload))
      _x = self.robot_state.m_total
      buff.write(_get_struct_d().pack(_x))
      buff.write(_get_struct_9d().pack(*self.robot_state.I_total))
      buff.write(_get_struct_3d().pack(*self.robot_state.F_x_Ctotal))
      buff.write(_get_struct_2d().pack(*self.robot_state.elbow))
      buff.write(_get_struct_2d().pack(*self.robot_state.elbow_d))
      buff.write(_get_struct_2d().pack(*self.robot_state.elbow_c))
      buff.write(_get_struct_2d().pack(*self.robot_state.delbow_c))
      buff.write(_get_struct_2d().pack(*self.robot_state.ddelbow_c))
      buff.write(_get_struct_7d().pack(*self.robot_state.tau_J))
      buff.write(_get_struct_7d().pack(*self.robot_state.tau_J_d))
      buff.write(_get_struct_7d().pack(*self.robot_state.dtau_J))
      buff.write(_get_struct_7d().pack(*self.robot_state.q))
      buff.write(_get_struct_7d().pack(*self.robot_state.q_d))
      buff.write(_get_struct_7d().pack(*self.robot_state.dq))
      buff.write(_get_struct_7d().pack(*self.robot_state.dq_d))
      buff.write(_get_struct_7d().pack(*self.robot_state.ddq_d))
      buff.write(_get_struct_7d().pack(*self.robot_state.joint_contact))
      buff.write(_get_struct_6d().pack(*self.robot_state.cartesian_contact))
      buff.write(_get_struct_7d().pack(*self.robot_state.joint_collision))
      buff.write(_get_struct_6d().pack(*self.robot_state.cartesian_collision))
      buff.write(_get_struct_7d().pack(*self.robot_state.tau_ext_hat_filtered))
      buff.write(_get_struct_6d().pack(*self.robot_state.O_F_ext_hat_K))
      buff.write(_get_struct_6d().pack(*self.robot_state.K_F_ext_hat_K))
      buff.write(_get_struct_6d().pack(*self.robot_state.O_dP_EE_d))
      buff.write(_get_struct_16d().pack(*self.robot_state.O_T_EE_c))
      buff.write(_get_struct_6d().pack(*self.robot_state.O_dP_EE_c))
      buff.write(_get_struct_6d().pack(*self.robot_state.O_ddP_EE_c))
      buff.write(_get_struct_7d().pack(*self.robot_state.theta))
      buff.write(_get_struct_7d().pack(*self.robot_state.dtheta))
      _x = self
      buff.write(_get_struct_74BdB3dBHdB().pack(_x.robot_state.current_errors.joint_position_limits_violation, _x.robot_state.current_errors.cartesian_position_limits_violation, _x.robot_state.current_errors.self_collision_avoidance_violation, _x.robot_state.current_errors.joint_velocity_violation, _x.robot_state.current_errors.cartesian_velocity_violation, _x.robot_state.current_errors.force_control_safety_violation, _x.robot_state.current_errors.joint_reflex, _x.robot_state.current_errors.cartesian_reflex, _x.robot_state.current_errors.max_goal_pose_deviation_violation, _x.robot_state.current_errors.max_path_pose_deviation_violation, _x.robot_state.current_errors.cartesian_velocity_profile_safety_violation, _x.robot_state.current_errors.joint_position_motion_generator_start_pose_invalid, _x.robot_state.current_errors.joint_motion_generator_position_limits_violation, _x.robot_state.current_errors.joint_motion_generator_velocity_limits_violation, _x.robot_state.current_errors.joint_motion_generator_velocity_discontinuity, _x.robot_state.current_errors.joint_motion_generator_acceleration_discontinuity, _x.robot_state.current_errors.cartesian_position_motion_generator_start_pose_invalid, _x.robot_state.current_errors.cartesian_motion_generator_elbow_limit_violation, _x.robot_state.current_errors.cartesian_motion_generator_velocity_limits_violation, _x.robot_state.current_errors.cartesian_motion_generator_velocity_discontinuity, _x.robot_state.current_errors.cartesian_motion_generator_acceleration_discontinuity, _x.robot_state.current_errors.cartesian_motion_generator_elbow_sign_inconsistent, _x.robot_state.current_errors.cartesian_motion_generator_start_elbow_invalid, _x.robot_state.current_errors.cartesian_motion_generator_joint_position_limits_violation, _x.robot_state.current_errors.cartesian_motion_generator_joint_velocity_limits_violation, _x.robot_state.current_errors.cartesian_motion_generator_joint_velocity_discontinuity, _x.robot_state.current_errors.cartesian_motion_generator_joint_acceleration_discontinuity, _x.robot_state.current_errors.cartesian_position_motion_generator_invalid_frame, _x.robot_state.current_errors.force_controller_desired_force_tolerance_violation, _x.robot_state.current_errors.controller_torque_discontinuity, _x.robot_state.current_errors.start_elbow_sign_inconsistent, _x.robot_state.current_errors.communication_constraints_violation, _x.robot_state.current_errors.power_limit_violation, _x.robot_state.current_errors.joint_p2p_insufficient_torque_for_planning, _x.robot_state.current_errors.tau_j_range_violation, _x.robot_state.current_errors.instability_detected, _x.robot_state.current_errors.joint_move_in_wrong_direction, _x.robot_state.last_motion_errors.joint_position_limits_violation, _x.robot_state.last_motion_errors.cartesian_position_limits_violation, _x.robot_state.last_motion_errors.self_collision_avoidance_violation, _x.robot_state.last_motion_errors.joint_velocity_violation, _x.robot_state.last_motion_errors.cartesian_velocity_violation, _x.robot_state.last_motion_errors.force_control_safety_violation, _x.robot_state.last_motion_errors.joint_reflex, _x.robot_state.last_motion_errors.cartesian_reflex, _x.robot_state.last_motion_errors.max_goal_pose_deviation_violation, _x.robot_state.last_motion_errors.max_path_pose_deviation_violation, _x.robot_state.last_motion_errors.cartesian_velocity_profile_safety_violation, _x.robot_state.last_motion_errors.joint_position_motion_generator_start_pose_invalid, _x.robot_state.last_motion_errors.joint_motion_generator_position_limits_violation, _x.robot_state.last_motion_errors.joint_motion_generator_velocity_limits_violation, _x.robot_state.last_motion_errors.joint_motion_generator_velocity_discontinuity, _x.robot_state.last_motion_errors.joint_motion_generator_acceleration_discontinuity, _x.robot_state.last_motion_errors.cartesian_position_motion_generator_start_pose_invalid, _x.robot_state.last_motion_errors.cartesian_motion_generator_elbow_limit_violation, _x.robot_state.last_motion_errors.cartesian_motion_generator_velocity_limits_violation, _x.robot_state.last_motion_errors.cartesian_motion_generator_velocity_discontinuity, _x.robot_state.last_motion_errors.cartesian_motion_generator_acceleration_discontinuity, _x.robot_state.last_motion_errors.cartesian_motion_generator_elbow_sign_inconsistent, _x.robot_state.last_motion_errors.cartesian_motion_generator_start_elbow_invalid, _x.robot_state.last_motion_errors.cartesian_motion_generator_joint_position_limits_violation, _x.robot_state.last_motion_errors.cartesian_motion_generator_joint_velocity_limits_violation, _x.robot_state.last_motion_errors.cartesian_motion_generator_joint_velocity_discontinuity, _x.robot_state.last_motion_errors.cartesian_motion_generator_joint_acceleration_discontinuity, _x.robot_state.last_motion_errors.cartesian_position_motion_generator_invalid_frame, _x.robot_state.last_motion_errors.force_controller_desired_force_tolerance_violation, _x.robot_state.last_motion_errors.controller_torque_discontinuity, _x.robot_state.last_motion_errors.start_elbow_sign_inconsistent, _x.robot_state.last_motion_errors.communication_constraints_violation, _x.robot_state.last_motion_errors.power_limit_violation, _x.robot_state.last_motion_errors.joint_p2p_insufficient_torque_for_planning, _x.robot_state.last_motion_errors.tau_j_range_violation, _x.robot_state.last_motion_errors.instability_detected, _x.robot_state.last_motion_errors.joint_move_in_wrong_direction, _x.robot_state.control_command_success_rate, _x.robot_state.robot_mode, _x.robot_state.robot_time, _x.robot_state.gripper_width, _x.robot_state.gripper_max_width, _x.robot_state.gripper_is_grasped, _x.robot_state.gripper_temperature, _x.robot_state.gripper_time, _x.robot_state.is_fresh))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.robot_state is None:
        self.robot_state = franka_interface_msgs.msg.RobotState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.robot_state.header.seq, _x.robot_state.header.stamp.secs, _x.robot_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_state.header.frame_id = str[start:end]
      start = end
      end += 128
      self.robot_state.pose_desired = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.robot_state.O_T_EE = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.robot_state.O_T_EE_d = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.robot_state.F_T_EE = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.robot_state.EE_T_K = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 8
      (self.robot_state.m_ee,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 72
      self.robot_state.I_ee = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 24
      self.robot_state.F_x_Cee = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 8
      (self.robot_state.m_load,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 72
      self.robot_state.I_load = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 24
      self.robot_state.F_x_Cload = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 8
      (self.robot_state.m_total,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 72
      self.robot_state.I_total = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 24
      self.robot_state.F_x_Ctotal = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 16
      self.robot_state.elbow = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 16
      self.robot_state.elbow_d = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 16
      self.robot_state.elbow_c = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 16
      self.robot_state.delbow_c = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 16
      self.robot_state.ddelbow_c = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_state.tau_J = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_state.tau_J_d = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_state.dtau_J = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_state.q = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_state.q_d = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_state.dq = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_state.dq_d = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_state.ddq_d = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_state.joint_contact = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 48
      self.robot_state.cartesian_contact = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_state.joint_collision = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 48
      self.robot_state.cartesian_collision = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_state.tau_ext_hat_filtered = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 48
      self.robot_state.O_F_ext_hat_K = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.robot_state.K_F_ext_hat_K = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.robot_state.O_dP_EE_d = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 128
      self.robot_state.O_T_EE_c = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 48
      self.robot_state.O_dP_EE_c = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.robot_state.O_ddP_EE_c = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_state.theta = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_state.dtheta = _get_struct_7d().unpack(str[start:end])
      _x = self
      start = end
      end += 119
      (_x.robot_state.current_errors.joint_position_limits_violation, _x.robot_state.current_errors.cartesian_position_limits_violation, _x.robot_state.current_errors.self_collision_avoidance_violation, _x.robot_state.current_errors.joint_velocity_violation, _x.robot_state.current_errors.cartesian_velocity_violation, _x.robot_state.current_errors.force_control_safety_violation, _x.robot_state.current_errors.joint_reflex, _x.robot_state.current_errors.cartesian_reflex, _x.robot_state.current_errors.max_goal_pose_deviation_violation, _x.robot_state.current_errors.max_path_pose_deviation_violation, _x.robot_state.current_errors.cartesian_velocity_profile_safety_violation, _x.robot_state.current_errors.joint_position_motion_generator_start_pose_invalid, _x.robot_state.current_errors.joint_motion_generator_position_limits_violation, _x.robot_state.current_errors.joint_motion_generator_velocity_limits_violation, _x.robot_state.current_errors.joint_motion_generator_velocity_discontinuity, _x.robot_state.current_errors.joint_motion_generator_acceleration_discontinuity, _x.robot_state.current_errors.cartesian_position_motion_generator_start_pose_invalid, _x.robot_state.current_errors.cartesian_motion_generator_elbow_limit_violation, _x.robot_state.current_errors.cartesian_motion_generator_velocity_limits_violation, _x.robot_state.current_errors.cartesian_motion_generator_velocity_discontinuity, _x.robot_state.current_errors.cartesian_motion_generator_acceleration_discontinuity, _x.robot_state.current_errors.cartesian_motion_generator_elbow_sign_inconsistent, _x.robot_state.current_errors.cartesian_motion_generator_start_elbow_invalid, _x.robot_state.current_errors.cartesian_motion_generator_joint_position_limits_violation, _x.robot_state.current_errors.cartesian_motion_generator_joint_velocity_limits_violation, _x.robot_state.current_errors.cartesian_motion_generator_joint_velocity_discontinuity, _x.robot_state.current_errors.cartesian_motion_generator_joint_acceleration_discontinuity, _x.robot_state.current_errors.cartesian_position_motion_generator_invalid_frame, _x.robot_state.current_errors.force_controller_desired_force_tolerance_violation, _x.robot_state.current_errors.controller_torque_discontinuity, _x.robot_state.current_errors.start_elbow_sign_inconsistent, _x.robot_state.current_errors.communication_constraints_violation, _x.robot_state.current_errors.power_limit_violation, _x.robot_state.current_errors.joint_p2p_insufficient_torque_for_planning, _x.robot_state.current_errors.tau_j_range_violation, _x.robot_state.current_errors.instability_detected, _x.robot_state.current_errors.joint_move_in_wrong_direction, _x.robot_state.last_motion_errors.joint_position_limits_violation, _x.robot_state.last_motion_errors.cartesian_position_limits_violation, _x.robot_state.last_motion_errors.self_collision_avoidance_violation, _x.robot_state.last_motion_errors.joint_velocity_violation, _x.robot_state.last_motion_errors.cartesian_velocity_violation, _x.robot_state.last_motion_errors.force_control_safety_violation, _x.robot_state.last_motion_errors.joint_reflex, _x.robot_state.last_motion_errors.cartesian_reflex, _x.robot_state.last_motion_errors.max_goal_pose_deviation_violation, _x.robot_state.last_motion_errors.max_path_pose_deviation_violation, _x.robot_state.last_motion_errors.cartesian_velocity_profile_safety_violation, _x.robot_state.last_motion_errors.joint_position_motion_generator_start_pose_invalid, _x.robot_state.last_motion_errors.joint_motion_generator_position_limits_violation, _x.robot_state.last_motion_errors.joint_motion_generator_velocity_limits_violation, _x.robot_state.last_motion_errors.joint_motion_generator_velocity_discontinuity, _x.robot_state.last_motion_errors.joint_motion_generator_acceleration_discontinuity, _x.robot_state.last_motion_errors.cartesian_position_motion_generator_start_pose_invalid, _x.robot_state.last_motion_errors.cartesian_motion_generator_elbow_limit_violation, _x.robot_state.last_motion_errors.cartesian_motion_generator_velocity_limits_violation, _x.robot_state.last_motion_errors.cartesian_motion_generator_velocity_discontinuity, _x.robot_state.last_motion_errors.cartesian_motion_generator_acceleration_discontinuity, _x.robot_state.last_motion_errors.cartesian_motion_generator_elbow_sign_inconsistent, _x.robot_state.last_motion_errors.cartesian_motion_generator_start_elbow_invalid, _x.robot_state.last_motion_errors.cartesian_motion_generator_joint_position_limits_violation, _x.robot_state.last_motion_errors.cartesian_motion_generator_joint_velocity_limits_violation, _x.robot_state.last_motion_errors.cartesian_motion_generator_joint_velocity_discontinuity, _x.robot_state.last_motion_errors.cartesian_motion_generator_joint_acceleration_discontinuity, _x.robot_state.last_motion_errors.cartesian_position_motion_generator_invalid_frame, _x.robot_state.last_motion_errors.force_controller_desired_force_tolerance_violation, _x.robot_state.last_motion_errors.controller_torque_discontinuity, _x.robot_state.last_motion_errors.start_elbow_sign_inconsistent, _x.robot_state.last_motion_errors.communication_constraints_violation, _x.robot_state.last_motion_errors.power_limit_violation, _x.robot_state.last_motion_errors.joint_p2p_insufficient_torque_for_planning, _x.robot_state.last_motion_errors.tau_j_range_violation, _x.robot_state.last_motion_errors.instability_detected, _x.robot_state.last_motion_errors.joint_move_in_wrong_direction, _x.robot_state.control_command_success_rate, _x.robot_state.robot_mode, _x.robot_state.robot_time, _x.robot_state.gripper_width, _x.robot_state.gripper_max_width, _x.robot_state.gripper_is_grasped, _x.robot_state.gripper_temperature, _x.robot_state.gripper_time, _x.robot_state.is_fresh,) = _get_struct_74BdB3dBHdB().unpack(str[start:end])
      self.robot_state.current_errors.joint_position_limits_violation = bool(self.robot_state.current_errors.joint_position_limits_violation)
      self.robot_state.current_errors.cartesian_position_limits_violation = bool(self.robot_state.current_errors.cartesian_position_limits_violation)
      self.robot_state.current_errors.self_collision_avoidance_violation = bool(self.robot_state.current_errors.self_collision_avoidance_violation)
      self.robot_state.current_errors.joint_velocity_violation = bool(self.robot_state.current_errors.joint_velocity_violation)
      self.robot_state.current_errors.cartesian_velocity_violation = bool(self.robot_state.current_errors.cartesian_velocity_violation)
      self.robot_state.current_errors.force_control_safety_violation = bool(self.robot_state.current_errors.force_control_safety_violation)
      self.robot_state.current_errors.joint_reflex = bool(self.robot_state.current_errors.joint_reflex)
      self.robot_state.current_errors.cartesian_reflex = bool(self.robot_state.current_errors.cartesian_reflex)
      self.robot_state.current_errors.max_goal_pose_deviation_violation = bool(self.robot_state.current_errors.max_goal_pose_deviation_violation)
      self.robot_state.current_errors.max_path_pose_deviation_violation = bool(self.robot_state.current_errors.max_path_pose_deviation_violation)
      self.robot_state.current_errors.cartesian_velocity_profile_safety_violation = bool(self.robot_state.current_errors.cartesian_velocity_profile_safety_violation)
      self.robot_state.current_errors.joint_position_motion_generator_start_pose_invalid = bool(self.robot_state.current_errors.joint_position_motion_generator_start_pose_invalid)
      self.robot_state.current_errors.joint_motion_generator_position_limits_violation = bool(self.robot_state.current_errors.joint_motion_generator_position_limits_violation)
      self.robot_state.current_errors.joint_motion_generator_velocity_limits_violation = bool(self.robot_state.current_errors.joint_motion_generator_velocity_limits_violation)
      self.robot_state.current_errors.joint_motion_generator_velocity_discontinuity = bool(self.robot_state.current_errors.joint_motion_generator_velocity_discontinuity)
      self.robot_state.current_errors.joint_motion_generator_acceleration_discontinuity = bool(self.robot_state.current_errors.joint_motion_generator_acceleration_discontinuity)
      self.robot_state.current_errors.cartesian_position_motion_generator_start_pose_invalid = bool(self.robot_state.current_errors.cartesian_position_motion_generator_start_pose_invalid)
      self.robot_state.current_errors.cartesian_motion_generator_elbow_limit_violation = bool(self.robot_state.current_errors.cartesian_motion_generator_elbow_limit_violation)
      self.robot_state.current_errors.cartesian_motion_generator_velocity_limits_violation = bool(self.robot_state.current_errors.cartesian_motion_generator_velocity_limits_violation)
      self.robot_state.current_errors.cartesian_motion_generator_velocity_discontinuity = bool(self.robot_state.current_errors.cartesian_motion_generator_velocity_discontinuity)
      self.robot_state.current_errors.cartesian_motion_generator_acceleration_discontinuity = bool(self.robot_state.current_errors.cartesian_motion_generator_acceleration_discontinuity)
      self.robot_state.current_errors.cartesian_motion_generator_elbow_sign_inconsistent = bool(self.robot_state.current_errors.cartesian_motion_generator_elbow_sign_inconsistent)
      self.robot_state.current_errors.cartesian_motion_generator_start_elbow_invalid = bool(self.robot_state.current_errors.cartesian_motion_generator_start_elbow_invalid)
      self.robot_state.current_errors.cartesian_motion_generator_joint_position_limits_violation = bool(self.robot_state.current_errors.cartesian_motion_generator_joint_position_limits_violation)
      self.robot_state.current_errors.cartesian_motion_generator_joint_velocity_limits_violation = bool(self.robot_state.current_errors.cartesian_motion_generator_joint_velocity_limits_violation)
      self.robot_state.current_errors.cartesian_motion_generator_joint_velocity_discontinuity = bool(self.robot_state.current_errors.cartesian_motion_generator_joint_velocity_discontinuity)
      self.robot_state.current_errors.cartesian_motion_generator_joint_acceleration_discontinuity = bool(self.robot_state.current_errors.cartesian_motion_generator_joint_acceleration_discontinuity)
      self.robot_state.current_errors.cartesian_position_motion_generator_invalid_frame = bool(self.robot_state.current_errors.cartesian_position_motion_generator_invalid_frame)
      self.robot_state.current_errors.force_controller_desired_force_tolerance_violation = bool(self.robot_state.current_errors.force_controller_desired_force_tolerance_violation)
      self.robot_state.current_errors.controller_torque_discontinuity = bool(self.robot_state.current_errors.controller_torque_discontinuity)
      self.robot_state.current_errors.start_elbow_sign_inconsistent = bool(self.robot_state.current_errors.start_elbow_sign_inconsistent)
      self.robot_state.current_errors.communication_constraints_violation = bool(self.robot_state.current_errors.communication_constraints_violation)
      self.robot_state.current_errors.power_limit_violation = bool(self.robot_state.current_errors.power_limit_violation)
      self.robot_state.current_errors.joint_p2p_insufficient_torque_for_planning = bool(self.robot_state.current_errors.joint_p2p_insufficient_torque_for_planning)
      self.robot_state.current_errors.tau_j_range_violation = bool(self.robot_state.current_errors.tau_j_range_violation)
      self.robot_state.current_errors.instability_detected = bool(self.robot_state.current_errors.instability_detected)
      self.robot_state.current_errors.joint_move_in_wrong_direction = bool(self.robot_state.current_errors.joint_move_in_wrong_direction)
      self.robot_state.last_motion_errors.joint_position_limits_violation = bool(self.robot_state.last_motion_errors.joint_position_limits_violation)
      self.robot_state.last_motion_errors.cartesian_position_limits_violation = bool(self.robot_state.last_motion_errors.cartesian_position_limits_violation)
      self.robot_state.last_motion_errors.self_collision_avoidance_violation = bool(self.robot_state.last_motion_errors.self_collision_avoidance_violation)
      self.robot_state.last_motion_errors.joint_velocity_violation = bool(self.robot_state.last_motion_errors.joint_velocity_violation)
      self.robot_state.last_motion_errors.cartesian_velocity_violation = bool(self.robot_state.last_motion_errors.cartesian_velocity_violation)
      self.robot_state.last_motion_errors.force_control_safety_violation = bool(self.robot_state.last_motion_errors.force_control_safety_violation)
      self.robot_state.last_motion_errors.joint_reflex = bool(self.robot_state.last_motion_errors.joint_reflex)
      self.robot_state.last_motion_errors.cartesian_reflex = bool(self.robot_state.last_motion_errors.cartesian_reflex)
      self.robot_state.last_motion_errors.max_goal_pose_deviation_violation = bool(self.robot_state.last_motion_errors.max_goal_pose_deviation_violation)
      self.robot_state.last_motion_errors.max_path_pose_deviation_violation = bool(self.robot_state.last_motion_errors.max_path_pose_deviation_violation)
      self.robot_state.last_motion_errors.cartesian_velocity_profile_safety_violation = bool(self.robot_state.last_motion_errors.cartesian_velocity_profile_safety_violation)
      self.robot_state.last_motion_errors.joint_position_motion_generator_start_pose_invalid = bool(self.robot_state.last_motion_errors.joint_position_motion_generator_start_pose_invalid)
      self.robot_state.last_motion_errors.joint_motion_generator_position_limits_violation = bool(self.robot_state.last_motion_errors.joint_motion_generator_position_limits_violation)
      self.robot_state.last_motion_errors.joint_motion_generator_velocity_limits_violation = bool(self.robot_state.last_motion_errors.joint_motion_generator_velocity_limits_violation)
      self.robot_state.last_motion_errors.joint_motion_generator_velocity_discontinuity = bool(self.robot_state.last_motion_errors.joint_motion_generator_velocity_discontinuity)
      self.robot_state.last_motion_errors.joint_motion_generator_acceleration_discontinuity = bool(self.robot_state.last_motion_errors.joint_motion_generator_acceleration_discontinuity)
      self.robot_state.last_motion_errors.cartesian_position_motion_generator_start_pose_invalid = bool(self.robot_state.last_motion_errors.cartesian_position_motion_generator_start_pose_invalid)
      self.robot_state.last_motion_errors.cartesian_motion_generator_elbow_limit_violation = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_elbow_limit_violation)
      self.robot_state.last_motion_errors.cartesian_motion_generator_velocity_limits_violation = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_velocity_limits_violation)
      self.robot_state.last_motion_errors.cartesian_motion_generator_velocity_discontinuity = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_velocity_discontinuity)
      self.robot_state.last_motion_errors.cartesian_motion_generator_acceleration_discontinuity = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_acceleration_discontinuity)
      self.robot_state.last_motion_errors.cartesian_motion_generator_elbow_sign_inconsistent = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_elbow_sign_inconsistent)
      self.robot_state.last_motion_errors.cartesian_motion_generator_start_elbow_invalid = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_start_elbow_invalid)
      self.robot_state.last_motion_errors.cartesian_motion_generator_joint_position_limits_violation = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_joint_position_limits_violation)
      self.robot_state.last_motion_errors.cartesian_motion_generator_joint_velocity_limits_violation = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_joint_velocity_limits_violation)
      self.robot_state.last_motion_errors.cartesian_motion_generator_joint_velocity_discontinuity = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_joint_velocity_discontinuity)
      self.robot_state.last_motion_errors.cartesian_motion_generator_joint_acceleration_discontinuity = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_joint_acceleration_discontinuity)
      self.robot_state.last_motion_errors.cartesian_position_motion_generator_invalid_frame = bool(self.robot_state.last_motion_errors.cartesian_position_motion_generator_invalid_frame)
      self.robot_state.last_motion_errors.force_controller_desired_force_tolerance_violation = bool(self.robot_state.last_motion_errors.force_controller_desired_force_tolerance_violation)
      self.robot_state.last_motion_errors.controller_torque_discontinuity = bool(self.robot_state.last_motion_errors.controller_torque_discontinuity)
      self.robot_state.last_motion_errors.start_elbow_sign_inconsistent = bool(self.robot_state.last_motion_errors.start_elbow_sign_inconsistent)
      self.robot_state.last_motion_errors.communication_constraints_violation = bool(self.robot_state.last_motion_errors.communication_constraints_violation)
      self.robot_state.last_motion_errors.power_limit_violation = bool(self.robot_state.last_motion_errors.power_limit_violation)
      self.robot_state.last_motion_errors.joint_p2p_insufficient_torque_for_planning = bool(self.robot_state.last_motion_errors.joint_p2p_insufficient_torque_for_planning)
      self.robot_state.last_motion_errors.tau_j_range_violation = bool(self.robot_state.last_motion_errors.tau_j_range_violation)
      self.robot_state.last_motion_errors.instability_detected = bool(self.robot_state.last_motion_errors.instability_detected)
      self.robot_state.last_motion_errors.joint_move_in_wrong_direction = bool(self.robot_state.last_motion_errors.joint_move_in_wrong_direction)
      self.robot_state.gripper_is_grasped = bool(self.robot_state.gripper_is_grasped)
      self.robot_state.is_fresh = bool(self.robot_state.is_fresh)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.robot_state.header.seq, _x.robot_state.header.stamp.secs, _x.robot_state.header.stamp.nsecs))
      _x = self.robot_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.robot_state.pose_desired.tostring())
      buff.write(self.robot_state.O_T_EE.tostring())
      buff.write(self.robot_state.O_T_EE_d.tostring())
      buff.write(self.robot_state.F_T_EE.tostring())
      buff.write(self.robot_state.EE_T_K.tostring())
      _x = self.robot_state.m_ee
      buff.write(_get_struct_d().pack(_x))
      buff.write(self.robot_state.I_ee.tostring())
      buff.write(self.robot_state.F_x_Cee.tostring())
      _x = self.robot_state.m_load
      buff.write(_get_struct_d().pack(_x))
      buff.write(self.robot_state.I_load.tostring())
      buff.write(self.robot_state.F_x_Cload.tostring())
      _x = self.robot_state.m_total
      buff.write(_get_struct_d().pack(_x))
      buff.write(self.robot_state.I_total.tostring())
      buff.write(self.robot_state.F_x_Ctotal.tostring())
      buff.write(self.robot_state.elbow.tostring())
      buff.write(self.robot_state.elbow_d.tostring())
      buff.write(self.robot_state.elbow_c.tostring())
      buff.write(self.robot_state.delbow_c.tostring())
      buff.write(self.robot_state.ddelbow_c.tostring())
      buff.write(self.robot_state.tau_J.tostring())
      buff.write(self.robot_state.tau_J_d.tostring())
      buff.write(self.robot_state.dtau_J.tostring())
      buff.write(self.robot_state.q.tostring())
      buff.write(self.robot_state.q_d.tostring())
      buff.write(self.robot_state.dq.tostring())
      buff.write(self.robot_state.dq_d.tostring())
      buff.write(self.robot_state.ddq_d.tostring())
      buff.write(self.robot_state.joint_contact.tostring())
      buff.write(self.robot_state.cartesian_contact.tostring())
      buff.write(self.robot_state.joint_collision.tostring())
      buff.write(self.robot_state.cartesian_collision.tostring())
      buff.write(self.robot_state.tau_ext_hat_filtered.tostring())
      buff.write(self.robot_state.O_F_ext_hat_K.tostring())
      buff.write(self.robot_state.K_F_ext_hat_K.tostring())
      buff.write(self.robot_state.O_dP_EE_d.tostring())
      buff.write(self.robot_state.O_T_EE_c.tostring())
      buff.write(self.robot_state.O_dP_EE_c.tostring())
      buff.write(self.robot_state.O_ddP_EE_c.tostring())
      buff.write(self.robot_state.theta.tostring())
      buff.write(self.robot_state.dtheta.tostring())
      _x = self
      buff.write(_get_struct_74BdB3dBHdB().pack(_x.robot_state.current_errors.joint_position_limits_violation, _x.robot_state.current_errors.cartesian_position_limits_violation, _x.robot_state.current_errors.self_collision_avoidance_violation, _x.robot_state.current_errors.joint_velocity_violation, _x.robot_state.current_errors.cartesian_velocity_violation, _x.robot_state.current_errors.force_control_safety_violation, _x.robot_state.current_errors.joint_reflex, _x.robot_state.current_errors.cartesian_reflex, _x.robot_state.current_errors.max_goal_pose_deviation_violation, _x.robot_state.current_errors.max_path_pose_deviation_violation, _x.robot_state.current_errors.cartesian_velocity_profile_safety_violation, _x.robot_state.current_errors.joint_position_motion_generator_start_pose_invalid, _x.robot_state.current_errors.joint_motion_generator_position_limits_violation, _x.robot_state.current_errors.joint_motion_generator_velocity_limits_violation, _x.robot_state.current_errors.joint_motion_generator_velocity_discontinuity, _x.robot_state.current_errors.joint_motion_generator_acceleration_discontinuity, _x.robot_state.current_errors.cartesian_position_motion_generator_start_pose_invalid, _x.robot_state.current_errors.cartesian_motion_generator_elbow_limit_violation, _x.robot_state.current_errors.cartesian_motion_generator_velocity_limits_violation, _x.robot_state.current_errors.cartesian_motion_generator_velocity_discontinuity, _x.robot_state.current_errors.cartesian_motion_generator_acceleration_discontinuity, _x.robot_state.current_errors.cartesian_motion_generator_elbow_sign_inconsistent, _x.robot_state.current_errors.cartesian_motion_generator_start_elbow_invalid, _x.robot_state.current_errors.cartesian_motion_generator_joint_position_limits_violation, _x.robot_state.current_errors.cartesian_motion_generator_joint_velocity_limits_violation, _x.robot_state.current_errors.cartesian_motion_generator_joint_velocity_discontinuity, _x.robot_state.current_errors.cartesian_motion_generator_joint_acceleration_discontinuity, _x.robot_state.current_errors.cartesian_position_motion_generator_invalid_frame, _x.robot_state.current_errors.force_controller_desired_force_tolerance_violation, _x.robot_state.current_errors.controller_torque_discontinuity, _x.robot_state.current_errors.start_elbow_sign_inconsistent, _x.robot_state.current_errors.communication_constraints_violation, _x.robot_state.current_errors.power_limit_violation, _x.robot_state.current_errors.joint_p2p_insufficient_torque_for_planning, _x.robot_state.current_errors.tau_j_range_violation, _x.robot_state.current_errors.instability_detected, _x.robot_state.current_errors.joint_move_in_wrong_direction, _x.robot_state.last_motion_errors.joint_position_limits_violation, _x.robot_state.last_motion_errors.cartesian_position_limits_violation, _x.robot_state.last_motion_errors.self_collision_avoidance_violation, _x.robot_state.last_motion_errors.joint_velocity_violation, _x.robot_state.last_motion_errors.cartesian_velocity_violation, _x.robot_state.last_motion_errors.force_control_safety_violation, _x.robot_state.last_motion_errors.joint_reflex, _x.robot_state.last_motion_errors.cartesian_reflex, _x.robot_state.last_motion_errors.max_goal_pose_deviation_violation, _x.robot_state.last_motion_errors.max_path_pose_deviation_violation, _x.robot_state.last_motion_errors.cartesian_velocity_profile_safety_violation, _x.robot_state.last_motion_errors.joint_position_motion_generator_start_pose_invalid, _x.robot_state.last_motion_errors.joint_motion_generator_position_limits_violation, _x.robot_state.last_motion_errors.joint_motion_generator_velocity_limits_violation, _x.robot_state.last_motion_errors.joint_motion_generator_velocity_discontinuity, _x.robot_state.last_motion_errors.joint_motion_generator_acceleration_discontinuity, _x.robot_state.last_motion_errors.cartesian_position_motion_generator_start_pose_invalid, _x.robot_state.last_motion_errors.cartesian_motion_generator_elbow_limit_violation, _x.robot_state.last_motion_errors.cartesian_motion_generator_velocity_limits_violation, _x.robot_state.last_motion_errors.cartesian_motion_generator_velocity_discontinuity, _x.robot_state.last_motion_errors.cartesian_motion_generator_acceleration_discontinuity, _x.robot_state.last_motion_errors.cartesian_motion_generator_elbow_sign_inconsistent, _x.robot_state.last_motion_errors.cartesian_motion_generator_start_elbow_invalid, _x.robot_state.last_motion_errors.cartesian_motion_generator_joint_position_limits_violation, _x.robot_state.last_motion_errors.cartesian_motion_generator_joint_velocity_limits_violation, _x.robot_state.last_motion_errors.cartesian_motion_generator_joint_velocity_discontinuity, _x.robot_state.last_motion_errors.cartesian_motion_generator_joint_acceleration_discontinuity, _x.robot_state.last_motion_errors.cartesian_position_motion_generator_invalid_frame, _x.robot_state.last_motion_errors.force_controller_desired_force_tolerance_violation, _x.robot_state.last_motion_errors.controller_torque_discontinuity, _x.robot_state.last_motion_errors.start_elbow_sign_inconsistent, _x.robot_state.last_motion_errors.communication_constraints_violation, _x.robot_state.last_motion_errors.power_limit_violation, _x.robot_state.last_motion_errors.joint_p2p_insufficient_torque_for_planning, _x.robot_state.last_motion_errors.tau_j_range_violation, _x.robot_state.last_motion_errors.instability_detected, _x.robot_state.last_motion_errors.joint_move_in_wrong_direction, _x.robot_state.control_command_success_rate, _x.robot_state.robot_mode, _x.robot_state.robot_time, _x.robot_state.gripper_width, _x.robot_state.gripper_max_width, _x.robot_state.gripper_is_grasped, _x.robot_state.gripper_temperature, _x.robot_state.gripper_time, _x.robot_state.is_fresh))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.robot_state is None:
        self.robot_state = franka_interface_msgs.msg.RobotState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.robot_state.header.seq, _x.robot_state.header.stamp.secs, _x.robot_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_state.header.frame_id = str[start:end]
      start = end
      end += 128
      self.robot_state.pose_desired = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.robot_state.O_T_EE = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.robot_state.O_T_EE_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.robot_state.F_T_EE = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.robot_state.EE_T_K = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 8
      (self.robot_state.m_ee,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 72
      self.robot_state.I_ee = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 24
      self.robot_state.F_x_Cee = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 8
      (self.robot_state.m_load,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 72
      self.robot_state.I_load = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 24
      self.robot_state.F_x_Cload = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 8
      (self.robot_state.m_total,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 72
      self.robot_state.I_total = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 24
      self.robot_state.F_x_Ctotal = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 16
      self.robot_state.elbow = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 16
      self.robot_state.elbow_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 16
      self.robot_state.elbow_c = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 16
      self.robot_state.delbow_c = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 16
      self.robot_state.ddelbow_c = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 56
      self.robot_state.tau_J = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_state.tau_J_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_state.dtau_J = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_state.q = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_state.q_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_state.dq = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_state.dq_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_state.ddq_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_state.joint_contact = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 48
      self.robot_state.cartesian_contact = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 56
      self.robot_state.joint_collision = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 48
      self.robot_state.cartesian_collision = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 56
      self.robot_state.tau_ext_hat_filtered = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 48
      self.robot_state.O_F_ext_hat_K = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.robot_state.K_F_ext_hat_K = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.robot_state.O_dP_EE_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 128
      self.robot_state.O_T_EE_c = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 48
      self.robot_state.O_dP_EE_c = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.robot_state.O_ddP_EE_c = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 56
      self.robot_state.theta = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_state.dtheta = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      _x = self
      start = end
      end += 119
      (_x.robot_state.current_errors.joint_position_limits_violation, _x.robot_state.current_errors.cartesian_position_limits_violation, _x.robot_state.current_errors.self_collision_avoidance_violation, _x.robot_state.current_errors.joint_velocity_violation, _x.robot_state.current_errors.cartesian_velocity_violation, _x.robot_state.current_errors.force_control_safety_violation, _x.robot_state.current_errors.joint_reflex, _x.robot_state.current_errors.cartesian_reflex, _x.robot_state.current_errors.max_goal_pose_deviation_violation, _x.robot_state.current_errors.max_path_pose_deviation_violation, _x.robot_state.current_errors.cartesian_velocity_profile_safety_violation, _x.robot_state.current_errors.joint_position_motion_generator_start_pose_invalid, _x.robot_state.current_errors.joint_motion_generator_position_limits_violation, _x.robot_state.current_errors.joint_motion_generator_velocity_limits_violation, _x.robot_state.current_errors.joint_motion_generator_velocity_discontinuity, _x.robot_state.current_errors.joint_motion_generator_acceleration_discontinuity, _x.robot_state.current_errors.cartesian_position_motion_generator_start_pose_invalid, _x.robot_state.current_errors.cartesian_motion_generator_elbow_limit_violation, _x.robot_state.current_errors.cartesian_motion_generator_velocity_limits_violation, _x.robot_state.current_errors.cartesian_motion_generator_velocity_discontinuity, _x.robot_state.current_errors.cartesian_motion_generator_acceleration_discontinuity, _x.robot_state.current_errors.cartesian_motion_generator_elbow_sign_inconsistent, _x.robot_state.current_errors.cartesian_motion_generator_start_elbow_invalid, _x.robot_state.current_errors.cartesian_motion_generator_joint_position_limits_violation, _x.robot_state.current_errors.cartesian_motion_generator_joint_velocity_limits_violation, _x.robot_state.current_errors.cartesian_motion_generator_joint_velocity_discontinuity, _x.robot_state.current_errors.cartesian_motion_generator_joint_acceleration_discontinuity, _x.robot_state.current_errors.cartesian_position_motion_generator_invalid_frame, _x.robot_state.current_errors.force_controller_desired_force_tolerance_violation, _x.robot_state.current_errors.controller_torque_discontinuity, _x.robot_state.current_errors.start_elbow_sign_inconsistent, _x.robot_state.current_errors.communication_constraints_violation, _x.robot_state.current_errors.power_limit_violation, _x.robot_state.current_errors.joint_p2p_insufficient_torque_for_planning, _x.robot_state.current_errors.tau_j_range_violation, _x.robot_state.current_errors.instability_detected, _x.robot_state.current_errors.joint_move_in_wrong_direction, _x.robot_state.last_motion_errors.joint_position_limits_violation, _x.robot_state.last_motion_errors.cartesian_position_limits_violation, _x.robot_state.last_motion_errors.self_collision_avoidance_violation, _x.robot_state.last_motion_errors.joint_velocity_violation, _x.robot_state.last_motion_errors.cartesian_velocity_violation, _x.robot_state.last_motion_errors.force_control_safety_violation, _x.robot_state.last_motion_errors.joint_reflex, _x.robot_state.last_motion_errors.cartesian_reflex, _x.robot_state.last_motion_errors.max_goal_pose_deviation_violation, _x.robot_state.last_motion_errors.max_path_pose_deviation_violation, _x.robot_state.last_motion_errors.cartesian_velocity_profile_safety_violation, _x.robot_state.last_motion_errors.joint_position_motion_generator_start_pose_invalid, _x.robot_state.last_motion_errors.joint_motion_generator_position_limits_violation, _x.robot_state.last_motion_errors.joint_motion_generator_velocity_limits_violation, _x.robot_state.last_motion_errors.joint_motion_generator_velocity_discontinuity, _x.robot_state.last_motion_errors.joint_motion_generator_acceleration_discontinuity, _x.robot_state.last_motion_errors.cartesian_position_motion_generator_start_pose_invalid, _x.robot_state.last_motion_errors.cartesian_motion_generator_elbow_limit_violation, _x.robot_state.last_motion_errors.cartesian_motion_generator_velocity_limits_violation, _x.robot_state.last_motion_errors.cartesian_motion_generator_velocity_discontinuity, _x.robot_state.last_motion_errors.cartesian_motion_generator_acceleration_discontinuity, _x.robot_state.last_motion_errors.cartesian_motion_generator_elbow_sign_inconsistent, _x.robot_state.last_motion_errors.cartesian_motion_generator_start_elbow_invalid, _x.robot_state.last_motion_errors.cartesian_motion_generator_joint_position_limits_violation, _x.robot_state.last_motion_errors.cartesian_motion_generator_joint_velocity_limits_violation, _x.robot_state.last_motion_errors.cartesian_motion_generator_joint_velocity_discontinuity, _x.robot_state.last_motion_errors.cartesian_motion_generator_joint_acceleration_discontinuity, _x.robot_state.last_motion_errors.cartesian_position_motion_generator_invalid_frame, _x.robot_state.last_motion_errors.force_controller_desired_force_tolerance_violation, _x.robot_state.last_motion_errors.controller_torque_discontinuity, _x.robot_state.last_motion_errors.start_elbow_sign_inconsistent, _x.robot_state.last_motion_errors.communication_constraints_violation, _x.robot_state.last_motion_errors.power_limit_violation, _x.robot_state.last_motion_errors.joint_p2p_insufficient_torque_for_planning, _x.robot_state.last_motion_errors.tau_j_range_violation, _x.robot_state.last_motion_errors.instability_detected, _x.robot_state.last_motion_errors.joint_move_in_wrong_direction, _x.robot_state.control_command_success_rate, _x.robot_state.robot_mode, _x.robot_state.robot_time, _x.robot_state.gripper_width, _x.robot_state.gripper_max_width, _x.robot_state.gripper_is_grasped, _x.robot_state.gripper_temperature, _x.robot_state.gripper_time, _x.robot_state.is_fresh,) = _get_struct_74BdB3dBHdB().unpack(str[start:end])
      self.robot_state.current_errors.joint_position_limits_violation = bool(self.robot_state.current_errors.joint_position_limits_violation)
      self.robot_state.current_errors.cartesian_position_limits_violation = bool(self.robot_state.current_errors.cartesian_position_limits_violation)
      self.robot_state.current_errors.self_collision_avoidance_violation = bool(self.robot_state.current_errors.self_collision_avoidance_violation)
      self.robot_state.current_errors.joint_velocity_violation = bool(self.robot_state.current_errors.joint_velocity_violation)
      self.robot_state.current_errors.cartesian_velocity_violation = bool(self.robot_state.current_errors.cartesian_velocity_violation)
      self.robot_state.current_errors.force_control_safety_violation = bool(self.robot_state.current_errors.force_control_safety_violation)
      self.robot_state.current_errors.joint_reflex = bool(self.robot_state.current_errors.joint_reflex)
      self.robot_state.current_errors.cartesian_reflex = bool(self.robot_state.current_errors.cartesian_reflex)
      self.robot_state.current_errors.max_goal_pose_deviation_violation = bool(self.robot_state.current_errors.max_goal_pose_deviation_violation)
      self.robot_state.current_errors.max_path_pose_deviation_violation = bool(self.robot_state.current_errors.max_path_pose_deviation_violation)
      self.robot_state.current_errors.cartesian_velocity_profile_safety_violation = bool(self.robot_state.current_errors.cartesian_velocity_profile_safety_violation)
      self.robot_state.current_errors.joint_position_motion_generator_start_pose_invalid = bool(self.robot_state.current_errors.joint_position_motion_generator_start_pose_invalid)
      self.robot_state.current_errors.joint_motion_generator_position_limits_violation = bool(self.robot_state.current_errors.joint_motion_generator_position_limits_violation)
      self.robot_state.current_errors.joint_motion_generator_velocity_limits_violation = bool(self.robot_state.current_errors.joint_motion_generator_velocity_limits_violation)
      self.robot_state.current_errors.joint_motion_generator_velocity_discontinuity = bool(self.robot_state.current_errors.joint_motion_generator_velocity_discontinuity)
      self.robot_state.current_errors.joint_motion_generator_acceleration_discontinuity = bool(self.robot_state.current_errors.joint_motion_generator_acceleration_discontinuity)
      self.robot_state.current_errors.cartesian_position_motion_generator_start_pose_invalid = bool(self.robot_state.current_errors.cartesian_position_motion_generator_start_pose_invalid)
      self.robot_state.current_errors.cartesian_motion_generator_elbow_limit_violation = bool(self.robot_state.current_errors.cartesian_motion_generator_elbow_limit_violation)
      self.robot_state.current_errors.cartesian_motion_generator_velocity_limits_violation = bool(self.robot_state.current_errors.cartesian_motion_generator_velocity_limits_violation)
      self.robot_state.current_errors.cartesian_motion_generator_velocity_discontinuity = bool(self.robot_state.current_errors.cartesian_motion_generator_velocity_discontinuity)
      self.robot_state.current_errors.cartesian_motion_generator_acceleration_discontinuity = bool(self.robot_state.current_errors.cartesian_motion_generator_acceleration_discontinuity)
      self.robot_state.current_errors.cartesian_motion_generator_elbow_sign_inconsistent = bool(self.robot_state.current_errors.cartesian_motion_generator_elbow_sign_inconsistent)
      self.robot_state.current_errors.cartesian_motion_generator_start_elbow_invalid = bool(self.robot_state.current_errors.cartesian_motion_generator_start_elbow_invalid)
      self.robot_state.current_errors.cartesian_motion_generator_joint_position_limits_violation = bool(self.robot_state.current_errors.cartesian_motion_generator_joint_position_limits_violation)
      self.robot_state.current_errors.cartesian_motion_generator_joint_velocity_limits_violation = bool(self.robot_state.current_errors.cartesian_motion_generator_joint_velocity_limits_violation)
      self.robot_state.current_errors.cartesian_motion_generator_joint_velocity_discontinuity = bool(self.robot_state.current_errors.cartesian_motion_generator_joint_velocity_discontinuity)
      self.robot_state.current_errors.cartesian_motion_generator_joint_acceleration_discontinuity = bool(self.robot_state.current_errors.cartesian_motion_generator_joint_acceleration_discontinuity)
      self.robot_state.current_errors.cartesian_position_motion_generator_invalid_frame = bool(self.robot_state.current_errors.cartesian_position_motion_generator_invalid_frame)
      self.robot_state.current_errors.force_controller_desired_force_tolerance_violation = bool(self.robot_state.current_errors.force_controller_desired_force_tolerance_violation)
      self.robot_state.current_errors.controller_torque_discontinuity = bool(self.robot_state.current_errors.controller_torque_discontinuity)
      self.robot_state.current_errors.start_elbow_sign_inconsistent = bool(self.robot_state.current_errors.start_elbow_sign_inconsistent)
      self.robot_state.current_errors.communication_constraints_violation = bool(self.robot_state.current_errors.communication_constraints_violation)
      self.robot_state.current_errors.power_limit_violation = bool(self.robot_state.current_errors.power_limit_violation)
      self.robot_state.current_errors.joint_p2p_insufficient_torque_for_planning = bool(self.robot_state.current_errors.joint_p2p_insufficient_torque_for_planning)
      self.robot_state.current_errors.tau_j_range_violation = bool(self.robot_state.current_errors.tau_j_range_violation)
      self.robot_state.current_errors.instability_detected = bool(self.robot_state.current_errors.instability_detected)
      self.robot_state.current_errors.joint_move_in_wrong_direction = bool(self.robot_state.current_errors.joint_move_in_wrong_direction)
      self.robot_state.last_motion_errors.joint_position_limits_violation = bool(self.robot_state.last_motion_errors.joint_position_limits_violation)
      self.robot_state.last_motion_errors.cartesian_position_limits_violation = bool(self.robot_state.last_motion_errors.cartesian_position_limits_violation)
      self.robot_state.last_motion_errors.self_collision_avoidance_violation = bool(self.robot_state.last_motion_errors.self_collision_avoidance_violation)
      self.robot_state.last_motion_errors.joint_velocity_violation = bool(self.robot_state.last_motion_errors.joint_velocity_violation)
      self.robot_state.last_motion_errors.cartesian_velocity_violation = bool(self.robot_state.last_motion_errors.cartesian_velocity_violation)
      self.robot_state.last_motion_errors.force_control_safety_violation = bool(self.robot_state.last_motion_errors.force_control_safety_violation)
      self.robot_state.last_motion_errors.joint_reflex = bool(self.robot_state.last_motion_errors.joint_reflex)
      self.robot_state.last_motion_errors.cartesian_reflex = bool(self.robot_state.last_motion_errors.cartesian_reflex)
      self.robot_state.last_motion_errors.max_goal_pose_deviation_violation = bool(self.robot_state.last_motion_errors.max_goal_pose_deviation_violation)
      self.robot_state.last_motion_errors.max_path_pose_deviation_violation = bool(self.robot_state.last_motion_errors.max_path_pose_deviation_violation)
      self.robot_state.last_motion_errors.cartesian_velocity_profile_safety_violation = bool(self.robot_state.last_motion_errors.cartesian_velocity_profile_safety_violation)
      self.robot_state.last_motion_errors.joint_position_motion_generator_start_pose_invalid = bool(self.robot_state.last_motion_errors.joint_position_motion_generator_start_pose_invalid)
      self.robot_state.last_motion_errors.joint_motion_generator_position_limits_violation = bool(self.robot_state.last_motion_errors.joint_motion_generator_position_limits_violation)
      self.robot_state.last_motion_errors.joint_motion_generator_velocity_limits_violation = bool(self.robot_state.last_motion_errors.joint_motion_generator_velocity_limits_violation)
      self.robot_state.last_motion_errors.joint_motion_generator_velocity_discontinuity = bool(self.robot_state.last_motion_errors.joint_motion_generator_velocity_discontinuity)
      self.robot_state.last_motion_errors.joint_motion_generator_acceleration_discontinuity = bool(self.robot_state.last_motion_errors.joint_motion_generator_acceleration_discontinuity)
      self.robot_state.last_motion_errors.cartesian_position_motion_generator_start_pose_invalid = bool(self.robot_state.last_motion_errors.cartesian_position_motion_generator_start_pose_invalid)
      self.robot_state.last_motion_errors.cartesian_motion_generator_elbow_limit_violation = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_elbow_limit_violation)
      self.robot_state.last_motion_errors.cartesian_motion_generator_velocity_limits_violation = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_velocity_limits_violation)
      self.robot_state.last_motion_errors.cartesian_motion_generator_velocity_discontinuity = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_velocity_discontinuity)
      self.robot_state.last_motion_errors.cartesian_motion_generator_acceleration_discontinuity = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_acceleration_discontinuity)
      self.robot_state.last_motion_errors.cartesian_motion_generator_elbow_sign_inconsistent = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_elbow_sign_inconsistent)
      self.robot_state.last_motion_errors.cartesian_motion_generator_start_elbow_invalid = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_start_elbow_invalid)
      self.robot_state.last_motion_errors.cartesian_motion_generator_joint_position_limits_violation = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_joint_position_limits_violation)
      self.robot_state.last_motion_errors.cartesian_motion_generator_joint_velocity_limits_violation = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_joint_velocity_limits_violation)
      self.robot_state.last_motion_errors.cartesian_motion_generator_joint_velocity_discontinuity = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_joint_velocity_discontinuity)
      self.robot_state.last_motion_errors.cartesian_motion_generator_joint_acceleration_discontinuity = bool(self.robot_state.last_motion_errors.cartesian_motion_generator_joint_acceleration_discontinuity)
      self.robot_state.last_motion_errors.cartesian_position_motion_generator_invalid_frame = bool(self.robot_state.last_motion_errors.cartesian_position_motion_generator_invalid_frame)
      self.robot_state.last_motion_errors.force_controller_desired_force_tolerance_violation = bool(self.robot_state.last_motion_errors.force_controller_desired_force_tolerance_violation)
      self.robot_state.last_motion_errors.controller_torque_discontinuity = bool(self.robot_state.last_motion_errors.controller_torque_discontinuity)
      self.robot_state.last_motion_errors.start_elbow_sign_inconsistent = bool(self.robot_state.last_motion_errors.start_elbow_sign_inconsistent)
      self.robot_state.last_motion_errors.communication_constraints_violation = bool(self.robot_state.last_motion_errors.communication_constraints_violation)
      self.robot_state.last_motion_errors.power_limit_violation = bool(self.robot_state.last_motion_errors.power_limit_violation)
      self.robot_state.last_motion_errors.joint_p2p_insufficient_torque_for_planning = bool(self.robot_state.last_motion_errors.joint_p2p_insufficient_torque_for_planning)
      self.robot_state.last_motion_errors.tau_j_range_violation = bool(self.robot_state.last_motion_errors.tau_j_range_violation)
      self.robot_state.last_motion_errors.instability_detected = bool(self.robot_state.last_motion_errors.instability_detected)
      self.robot_state.last_motion_errors.joint_move_in_wrong_direction = bool(self.robot_state.last_motion_errors.joint_move_in_wrong_direction)
      self.robot_state.gripper_is_grasped = bool(self.robot_state.gripper_is_grasped)
      self.robot_state.is_fresh = bool(self.robot_state.is_fresh)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16d = None
def _get_struct_16d():
    global _struct_16d
    if _struct_16d is None:
        _struct_16d = struct.Struct("<16d")
    return _struct_16d
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_74BdB3dBHdB = None
def _get_struct_74BdB3dBHdB():
    global _struct_74BdB3dBHdB
    if _struct_74BdB3dBHdB is None:
        _struct_74BdB3dBHdB = struct.Struct("<74BdB3dBHdB")
    return _struct_74BdB3dBHdB
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
class GetCurrentRobotStateCmd(object):
  _type          = 'franka_interface_msgs/GetCurrentRobotStateCmd'
  _md5sum = 'b518dbe0aba9b1925588d18e42fb85fa'
  _request_class  = GetCurrentRobotStateCmdRequest
  _response_class = GetCurrentRobotStateCmdResponse
