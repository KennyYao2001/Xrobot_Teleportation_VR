// Generated by gencpp from file franka_interface_msgs/ExecuteSkillGoal.msg
// DO NOT EDIT!


#ifndef FRANKA_INTERFACE_MSGS_MESSAGE_EXECUTESKILLGOAL_H
#define FRANKA_INTERFACE_MSGS_MESSAGE_EXECUTESKILLGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace franka_interface_msgs
{
template <class ContainerAllocator>
struct ExecuteSkillGoal_
{
  typedef ExecuteSkillGoal_<ContainerAllocator> Type;

  ExecuteSkillGoal_()
    : skill_type(0)
    , skill_description()
    , meta_skill_type(0)
    , meta_skill_id(0)
    , sensor_topics()
    , sensor_value_sizes()
    , initial_sensor_values()
    , trajectory_generator_type(0)
    , trajectory_generator_param_data_size(0)
    , trajectory_generator_param_data()
    , feedback_controller_type(0)
    , feedback_controller_param_data_size(0)
    , feedback_controller_param_data()
    , termination_handler_type(0)
    , termination_handler_param_data_size(0)
    , termination_handler_param_data()
    , timer_type(0)
    , num_timer_params(0)
    , timer_params()  {
    }
  ExecuteSkillGoal_(const ContainerAllocator& _alloc)
    : skill_type(0)
    , skill_description(_alloc)
    , meta_skill_type(0)
    , meta_skill_id(0)
    , sensor_topics(_alloc)
    , sensor_value_sizes(_alloc)
    , initial_sensor_values(_alloc)
    , trajectory_generator_type(0)
    , trajectory_generator_param_data_size(0)
    , trajectory_generator_param_data(_alloc)
    , feedback_controller_type(0)
    , feedback_controller_param_data_size(0)
    , feedback_controller_param_data(_alloc)
    , termination_handler_type(0)
    , termination_handler_param_data_size(0)
    , termination_handler_param_data(_alloc)
    , timer_type(0)
    , num_timer_params(0)
    , timer_params(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _skill_type_type;
  _skill_type_type skill_type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _skill_description_type;
  _skill_description_type skill_description;

   typedef uint8_t _meta_skill_type_type;
  _meta_skill_type_type meta_skill_type;

   typedef int64_t _meta_skill_id_type;
  _meta_skill_id_type meta_skill_id;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _sensor_topics_type;
  _sensor_topics_type sensor_topics;

   typedef std::vector<uint64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint64_t>> _sensor_value_sizes_type;
  _sensor_value_sizes_type sensor_value_sizes;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _initial_sensor_values_type;
  _initial_sensor_values_type initial_sensor_values;

   typedef uint8_t _trajectory_generator_type_type;
  _trajectory_generator_type_type trajectory_generator_type;

   typedef int32_t _trajectory_generator_param_data_size_type;
  _trajectory_generator_param_data_size_type trajectory_generator_param_data_size;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _trajectory_generator_param_data_type;
  _trajectory_generator_param_data_type trajectory_generator_param_data;

   typedef uint8_t _feedback_controller_type_type;
  _feedback_controller_type_type feedback_controller_type;

   typedef int32_t _feedback_controller_param_data_size_type;
  _feedback_controller_param_data_size_type feedback_controller_param_data_size;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _feedback_controller_param_data_type;
  _feedback_controller_param_data_type feedback_controller_param_data;

   typedef uint8_t _termination_handler_type_type;
  _termination_handler_type_type termination_handler_type;

   typedef int32_t _termination_handler_param_data_size_type;
  _termination_handler_param_data_size_type termination_handler_param_data_size;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _termination_handler_param_data_type;
  _termination_handler_param_data_type termination_handler_param_data;

   typedef uint8_t _timer_type_type;
  _timer_type_type timer_type;

   typedef int32_t _num_timer_params_type;
  _num_timer_params_type num_timer_params;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _timer_params_type;
  _timer_params_type timer_params;





  typedef boost::shared_ptr< ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteSkillGoal_

typedef ::franka_interface_msgs::ExecuteSkillGoal_<std::allocator<void> > ExecuteSkillGoal;

typedef boost::shared_ptr< ::franka_interface_msgs::ExecuteSkillGoal > ExecuteSkillGoalPtr;
typedef boost::shared_ptr< ::franka_interface_msgs::ExecuteSkillGoal const> ExecuteSkillGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator1> & lhs, const ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator2> & rhs)
{
  return lhs.skill_type == rhs.skill_type &&
    lhs.skill_description == rhs.skill_description &&
    lhs.meta_skill_type == rhs.meta_skill_type &&
    lhs.meta_skill_id == rhs.meta_skill_id &&
    lhs.sensor_topics == rhs.sensor_topics &&
    lhs.sensor_value_sizes == rhs.sensor_value_sizes &&
    lhs.initial_sensor_values == rhs.initial_sensor_values &&
    lhs.trajectory_generator_type == rhs.trajectory_generator_type &&
    lhs.trajectory_generator_param_data_size == rhs.trajectory_generator_param_data_size &&
    lhs.trajectory_generator_param_data == rhs.trajectory_generator_param_data &&
    lhs.feedback_controller_type == rhs.feedback_controller_type &&
    lhs.feedback_controller_param_data_size == rhs.feedback_controller_param_data_size &&
    lhs.feedback_controller_param_data == rhs.feedback_controller_param_data &&
    lhs.termination_handler_type == rhs.termination_handler_type &&
    lhs.termination_handler_param_data_size == rhs.termination_handler_param_data_size &&
    lhs.termination_handler_param_data == rhs.termination_handler_param_data &&
    lhs.timer_type == rhs.timer_type &&
    lhs.num_timer_params == rhs.num_timer_params &&
    lhs.timer_params == rhs.timer_params;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator1> & lhs, const ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace franka_interface_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55e633f630d923733f24dd64b606c67a";
  }

  static const char* value(const ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55e633f630d92373ULL;
  static const uint64_t static_value2 = 0x3f24dd64b606c67aULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_interface_msgs/ExecuteSkillGoal";
  }

  static const char* value(const ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"uint8 skill_type\n"
"string skill_description\n"
"uint8 meta_skill_type\n"
"int64 meta_skill_id\n"
"\n"
"# Sensor topic to subscribe to\n"
"string[] sensor_topics\n"
"uint64[] sensor_value_sizes\n"
"float64[] initial_sensor_values\n"
"\n"
"# traj gen\n"
"uint8 trajectory_generator_type\n"
"int32 trajectory_generator_param_data_size\n"
"uint8[] trajectory_generator_param_data\n"
"\n"
"# fbc\n"
"uint8 feedback_controller_type\n"
"int32 feedback_controller_param_data_size\n"
"uint8[] feedback_controller_param_data\n"
"\n"
"# termination\n"
"uint8 termination_handler_type\n"
"int32 termination_handler_param_data_size\n"
"uint8[] termination_handler_param_data \n"
"\n"
"# timer\n"
"uint8 timer_type\n"
"int32 num_timer_params\n"
"uint8[] timer_params\n"
;
  }

  static const char* value(const ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.skill_type);
      stream.next(m.skill_description);
      stream.next(m.meta_skill_type);
      stream.next(m.meta_skill_id);
      stream.next(m.sensor_topics);
      stream.next(m.sensor_value_sizes);
      stream.next(m.initial_sensor_values);
      stream.next(m.trajectory_generator_type);
      stream.next(m.trajectory_generator_param_data_size);
      stream.next(m.trajectory_generator_param_data);
      stream.next(m.feedback_controller_type);
      stream.next(m.feedback_controller_param_data_size);
      stream.next(m.feedback_controller_param_data);
      stream.next(m.termination_handler_type);
      stream.next(m.termination_handler_param_data_size);
      stream.next(m.termination_handler_param_data);
      stream.next(m.timer_type);
      stream.next(m.num_timer_params);
      stream.next(m.timer_params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteSkillGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_interface_msgs::ExecuteSkillGoal_<ContainerAllocator>& v)
  {
    s << indent << "skill_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.skill_type);
    s << indent << "skill_description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.skill_description);
    s << indent << "meta_skill_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.meta_skill_type);
    s << indent << "meta_skill_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.meta_skill_id);
    s << indent << "sensor_topics[]" << std::endl;
    for (size_t i = 0; i < v.sensor_topics.size(); ++i)
    {
      s << indent << "  sensor_topics[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sensor_topics[i]);
    }
    s << indent << "sensor_value_sizes[]" << std::endl;
    for (size_t i = 0; i < v.sensor_value_sizes.size(); ++i)
    {
      s << indent << "  sensor_value_sizes[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.sensor_value_sizes[i]);
    }
    s << indent << "initial_sensor_values[]" << std::endl;
    for (size_t i = 0; i < v.initial_sensor_values.size(); ++i)
    {
      s << indent << "  initial_sensor_values[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.initial_sensor_values[i]);
    }
    s << indent << "trajectory_generator_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trajectory_generator_type);
    s << indent << "trajectory_generator_param_data_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trajectory_generator_param_data_size);
    s << indent << "trajectory_generator_param_data[]" << std::endl;
    for (size_t i = 0; i < v.trajectory_generator_param_data.size(); ++i)
    {
      s << indent << "  trajectory_generator_param_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.trajectory_generator_param_data[i]);
    }
    s << indent << "feedback_controller_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.feedback_controller_type);
    s << indent << "feedback_controller_param_data_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.feedback_controller_param_data_size);
    s << indent << "feedback_controller_param_data[]" << std::endl;
    for (size_t i = 0; i < v.feedback_controller_param_data.size(); ++i)
    {
      s << indent << "  feedback_controller_param_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.feedback_controller_param_data[i]);
    }
    s << indent << "termination_handler_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.termination_handler_type);
    s << indent << "termination_handler_param_data_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.termination_handler_param_data_size);
    s << indent << "termination_handler_param_data[]" << std::endl;
    for (size_t i = 0; i < v.termination_handler_param_data.size(); ++i)
    {
      s << indent << "  termination_handler_param_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.termination_handler_param_data[i]);
    }
    s << indent << "timer_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.timer_type);
    s << indent << "num_timer_params: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_timer_params);
    s << indent << "timer_params[]" << std::endl;
    for (size_t i = 0; i < v.timer_params.size(); ++i)
    {
      s << indent << "  timer_params[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.timer_params[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_INTERFACE_MSGS_MESSAGE_EXECUTESKILLGOAL_H
