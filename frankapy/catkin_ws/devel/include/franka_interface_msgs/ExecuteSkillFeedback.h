// Generated by gencpp from file franka_interface_msgs/ExecuteSkillFeedback.msg
// DO NOT EDIT!


#ifndef FRANKA_INTERFACE_MSGS_MESSAGE_EXECUTESKILLFEEDBACK_H
#define FRANKA_INTERFACE_MSGS_MESSAGE_EXECUTESKILLFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace franka_interface_msgs
{
template <class ContainerAllocator>
struct ExecuteSkillFeedback_
{
  typedef ExecuteSkillFeedback_<ContainerAllocator> Type;

  ExecuteSkillFeedback_()
    : num_execution_feedback(0)
    , execution_feedback()  {
    }
  ExecuteSkillFeedback_(const ContainerAllocator& _alloc)
    : num_execution_feedback(0)
    , execution_feedback(_alloc)  {
  (void)_alloc;
    }



   typedef uint64_t _num_execution_feedback_type;
  _num_execution_feedback_type num_execution_feedback;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _execution_feedback_type;
  _execution_feedback_type execution_feedback;





  typedef boost::shared_ptr< ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteSkillFeedback_

typedef ::franka_interface_msgs::ExecuteSkillFeedback_<std::allocator<void> > ExecuteSkillFeedback;

typedef boost::shared_ptr< ::franka_interface_msgs::ExecuteSkillFeedback > ExecuteSkillFeedbackPtr;
typedef boost::shared_ptr< ::franka_interface_msgs::ExecuteSkillFeedback const> ExecuteSkillFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator1> & lhs, const ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.num_execution_feedback == rhs.num_execution_feedback &&
    lhs.execution_feedback == rhs.execution_feedback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator1> & lhs, const ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace franka_interface_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff908ea97d128e4dfc430213d4a485e0";
  }

  static const char* value(const ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff908ea97d128e4dULL;
  static const uint64_t static_value2 = 0xfc430213d4a485e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_interface_msgs/ExecuteSkillFeedback";
  }

  static const char* value(const ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Feedback message - happens during skill execution \n"
"uint64 num_execution_feedback\n"
"uint8[] execution_feedback\n"
"\n"
;
  }

  static const char* value(const ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_execution_feedback);
      stream.next(m.execution_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteSkillFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_interface_msgs::ExecuteSkillFeedback_<ContainerAllocator>& v)
  {
    s << indent << "num_execution_feedback: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.num_execution_feedback);
    s << indent << "execution_feedback[]" << std::endl;
    for (size_t i = 0; i < v.execution_feedback.size(); ++i)
    {
      s << indent << "  execution_feedback[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.execution_feedback[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_INTERFACE_MSGS_MESSAGE_EXECUTESKILLFEEDBACK_H
