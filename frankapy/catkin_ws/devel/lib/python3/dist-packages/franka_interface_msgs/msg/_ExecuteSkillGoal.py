# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from franka_interface_msgs/ExecuteSkillGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ExecuteSkillGoal(genpy.Message):
  _md5sum = "55e633f630d923733f24dd64b606c67a"
  _type = "franka_interface_msgs/ExecuteSkillGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
uint8 skill_type
string skill_description
uint8 meta_skill_type
int64 meta_skill_id

# Sensor topic to subscribe to
string[] sensor_topics
uint64[] sensor_value_sizes
float64[] initial_sensor_values

# traj gen
uint8 trajectory_generator_type
int32 trajectory_generator_param_data_size
uint8[] trajectory_generator_param_data

# fbc
uint8 feedback_controller_type
int32 feedback_controller_param_data_size
uint8[] feedback_controller_param_data

# termination
uint8 termination_handler_type
int32 termination_handler_param_data_size
uint8[] termination_handler_param_data 

# timer
uint8 timer_type
int32 num_timer_params
uint8[] timer_params
"""
  __slots__ = ['skill_type','skill_description','meta_skill_type','meta_skill_id','sensor_topics','sensor_value_sizes','initial_sensor_values','trajectory_generator_type','trajectory_generator_param_data_size','trajectory_generator_param_data','feedback_controller_type','feedback_controller_param_data_size','feedback_controller_param_data','termination_handler_type','termination_handler_param_data_size','termination_handler_param_data','timer_type','num_timer_params','timer_params']
  _slot_types = ['uint8','string','uint8','int64','string[]','uint64[]','float64[]','uint8','int32','uint8[]','uint8','int32','uint8[]','uint8','int32','uint8[]','uint8','int32','uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       skill_type,skill_description,meta_skill_type,meta_skill_id,sensor_topics,sensor_value_sizes,initial_sensor_values,trajectory_generator_type,trajectory_generator_param_data_size,trajectory_generator_param_data,feedback_controller_type,feedback_controller_param_data_size,feedback_controller_param_data,termination_handler_type,termination_handler_param_data_size,termination_handler_param_data,timer_type,num_timer_params,timer_params

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExecuteSkillGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.skill_type is None:
        self.skill_type = 0
      if self.skill_description is None:
        self.skill_description = ''
      if self.meta_skill_type is None:
        self.meta_skill_type = 0
      if self.meta_skill_id is None:
        self.meta_skill_id = 0
      if self.sensor_topics is None:
        self.sensor_topics = []
      if self.sensor_value_sizes is None:
        self.sensor_value_sizes = []
      if self.initial_sensor_values is None:
        self.initial_sensor_values = []
      if self.trajectory_generator_type is None:
        self.trajectory_generator_type = 0
      if self.trajectory_generator_param_data_size is None:
        self.trajectory_generator_param_data_size = 0
      if self.trajectory_generator_param_data is None:
        self.trajectory_generator_param_data = b''
      if self.feedback_controller_type is None:
        self.feedback_controller_type = 0
      if self.feedback_controller_param_data_size is None:
        self.feedback_controller_param_data_size = 0
      if self.feedback_controller_param_data is None:
        self.feedback_controller_param_data = b''
      if self.termination_handler_type is None:
        self.termination_handler_type = 0
      if self.termination_handler_param_data_size is None:
        self.termination_handler_param_data_size = 0
      if self.termination_handler_param_data is None:
        self.termination_handler_param_data = b''
      if self.timer_type is None:
        self.timer_type = 0
      if self.num_timer_params is None:
        self.num_timer_params = 0
      if self.timer_params is None:
        self.timer_params = b''
    else:
      self.skill_type = 0
      self.skill_description = ''
      self.meta_skill_type = 0
      self.meta_skill_id = 0
      self.sensor_topics = []
      self.sensor_value_sizes = []
      self.initial_sensor_values = []
      self.trajectory_generator_type = 0
      self.trajectory_generator_param_data_size = 0
      self.trajectory_generator_param_data = b''
      self.feedback_controller_type = 0
      self.feedback_controller_param_data_size = 0
      self.feedback_controller_param_data = b''
      self.termination_handler_type = 0
      self.termination_handler_param_data_size = 0
      self.termination_handler_param_data = b''
      self.timer_type = 0
      self.num_timer_params = 0
      self.timer_params = b''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.skill_type
      buff.write(_get_struct_B().pack(_x))
      _x = self.skill_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bq().pack(_x.meta_skill_type, _x.meta_skill_id))
      length = len(self.sensor_topics)
      buff.write(_struct_I.pack(length))
      for val1 in self.sensor_topics:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.sensor_value_sizes)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.sensor_value_sizes))
      length = len(self.initial_sensor_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.initial_sensor_values))
      _x = self
      buff.write(_get_struct_Bi().pack(_x.trajectory_generator_type, _x.trajectory_generator_param_data_size))
      _x = self.trajectory_generator_param_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bi().pack(_x.feedback_controller_type, _x.feedback_controller_param_data_size))
      _x = self.feedback_controller_param_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bi().pack(_x.termination_handler_type, _x.termination_handler_param_data_size))
      _x = self.termination_handler_param_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bi().pack(_x.timer_type, _x.num_timer_params))
      _x = self.timer_params
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.skill_type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.skill_description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.skill_description = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.meta_skill_type, _x.meta_skill_id,) = _get_struct_Bq().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sensor_topics = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.sensor_topics.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sensor_value_sizes = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.initial_sensor_values = s.unpack(str[start:end])
      _x = self
      start = end
      end += 5
      (_x.trajectory_generator_type, _x.trajectory_generator_param_data_size,) = _get_struct_Bi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.trajectory_generator_param_data = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.feedback_controller_type, _x.feedback_controller_param_data_size,) = _get_struct_Bi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.feedback_controller_param_data = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.termination_handler_type, _x.termination_handler_param_data_size,) = _get_struct_Bi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.termination_handler_param_data = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.timer_type, _x.num_timer_params,) = _get_struct_Bi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.timer_params = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.skill_type
      buff.write(_get_struct_B().pack(_x))
      _x = self.skill_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bq().pack(_x.meta_skill_type, _x.meta_skill_id))
      length = len(self.sensor_topics)
      buff.write(_struct_I.pack(length))
      for val1 in self.sensor_topics:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.sensor_value_sizes)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.sensor_value_sizes.tostring())
      length = len(self.initial_sensor_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.initial_sensor_values.tostring())
      _x = self
      buff.write(_get_struct_Bi().pack(_x.trajectory_generator_type, _x.trajectory_generator_param_data_size))
      _x = self.trajectory_generator_param_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bi().pack(_x.feedback_controller_type, _x.feedback_controller_param_data_size))
      _x = self.feedback_controller_param_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bi().pack(_x.termination_handler_type, _x.termination_handler_param_data_size))
      _x = self.termination_handler_param_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bi().pack(_x.timer_type, _x.num_timer_params))
      _x = self.timer_params
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.skill_type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.skill_description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.skill_description = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.meta_skill_type, _x.meta_skill_id,) = _get_struct_Bq().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sensor_topics = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.sensor_topics.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sensor_value_sizes = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.initial_sensor_values = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 5
      (_x.trajectory_generator_type, _x.trajectory_generator_param_data_size,) = _get_struct_Bi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.trajectory_generator_param_data = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.feedback_controller_type, _x.feedback_controller_param_data_size,) = _get_struct_Bi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.feedback_controller_param_data = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.termination_handler_type, _x.termination_handler_param_data_size,) = _get_struct_Bi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.termination_handler_param_data = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.timer_type, _x.num_timer_params,) = _get_struct_Bi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.timer_params = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
_struct_Bq = None
def _get_struct_Bq():
    global _struct_Bq
    if _struct_Bq is None:
        _struct_Bq = struct.Struct("<Bq")
    return _struct_Bq
